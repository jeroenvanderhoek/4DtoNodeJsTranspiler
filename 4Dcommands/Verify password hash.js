// 4D command: Verify password hash
// Verifies a password against its hash using bcrypt algorithm
// Based on 4D v19 documentation: Checks if a given password matches a stored hash generated by Generate password hash
// Verify password hash ( password ; hash ) -> Function result
// Parameter		Type		Description
// password		String		The plain text password to verify
// hash			String		The hash string generated by Generate password hash
// Function result	Boolean		True if password matches the hash, False otherwise

import bcrypt from 'bcryptjs';

export default function Verify_password_hash(processState, password, hash) {
    try {
        // Validate input parameters
        if (typeof password !== 'string') {
            console.error('Verify password hash: Password must be a string');
            return false;
        }
        
        if (typeof hash !== 'string') {
            console.error('Verify password hash: Hash must be a string');
            return false;
        }
        
        // Check if hash is empty
        if (!hash || hash.trim() === '') {
            console.error('Verify password hash: Hash cannot be empty');
            return false;
        }
        
        // Verify the password against the hash using bcrypt
        // bcrypt.compareSync automatically handles the salt that's embedded in the hash
        const isValid = bcrypt.compareSync(password, hash);
        
        // Log the verification attempt for security auditing
        if (processState.logEvents) {
            const logLevel = isValid ? 1 : 2; // Info for success, Warning for failure
            const logType = isValid ? 'INFO' : 'WARNING';
            
            processState.logEvents.push({
                timestamp: new Date().toISOString(),
                type: logLevel,
                typeName: logType,
                message: `Password verification ${isValid ? 'succeeded' : 'failed'} for user authentication`
            });
        }
        
        // Store verification result in processState for potential use by other components
        if (!processState.passwordVerifications) {
            processState.passwordVerifications = [];
        }
        
        processState.passwordVerifications.push({
            timestamp: new Date().toISOString(),
            success: isValid,
            // Don't store the actual password for security reasons
            passwordLength: password.length,
            hashPrefix: hash.substring(0, 10) // Store only prefix for debugging
        });
        
        return isValid;
        
    } catch (error) {
        console.error('Verify password hash error:', error.message);
        
        // Log the error
        if (processState.logEvents) {
            processState.logEvents.push({
                timestamp: new Date().toISOString(),
                type: 3, // Error level
                typeName: 'ERROR',
                message: `Password verification failed with error: ${error.message}`
            });
        }
        
        return false;
    }
}
